services:

  orchestrator:
    build: ./orchestrator-service/
    command: >
      sh -c "python manage.py makemigrations &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0:8000"
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_DB=mydatabase
      - POSTGRES_USER=myuser
      - POSTGRES_PASSWORD=mypassword
      - CARTS_URL=http://carts:8000
      - STOCKS_URL=http://stocks:8000
      - PRODUITS_URL=http://produits:8000
    expose:
      - "8000"
    depends_on:
      - carts
      - stocks
      - produits
      - db


  produits:
    build: ./produits-service/
    command: >
      sh -c "
             python manage.py makemigrations &&
             python manage.py migrate &&
             python manage.py populer
             python manage.py runserver 0.0.0.0:8000"
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_DB=mydatabase
      - POSTGRES_USER=myuser
      - POSTGRES_PASSWORD=mypassword
    expose:
      - "8000"
    depends_on:
      - db

  rapports:
    build: ./reporting-service/
    command: >
      sh -c "python manage.py makemigrations &&
             python manage.py migrate &&
             python manage.py populer
             python manage.py runserver 0.0.0.0:8000"
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_DB=mydatabase
      - POSTGRES_USER=myuser
      - POSTGRES_PASSWORD=mypassword
    expose:
      - "8000"
    depends_on:
      - db

  stocks:
      build: ./stock-service/
      command: >
        sh -c "python manage.py makemigrations &&
             python manage.py migrate &&
             python manage.py populer
             python manage.py runserver 0.0.0.0:8000"
      environment:
        - POSTGRES_HOST=db
        - POSTGRES_DB=mydatabase
        - POSTGRES_USER=myuser
        - POSTGRES_PASSWORD=mypassword
      expose:
        - "8000"
      depends_on:
        - db

  carts:
      build: ./carts-service/
      command: >
        sh -c "python manage.py makemigrations &&
            python manage.py migrate &&
            python manage.py populer
            python manage.py runserver 0.0.0.0:8000"
      environment:
        - POSTGRES_HOST=db
        - POSTGRES_DB=mydatabase
        - POSTGRES_USER=myuser
        - POSTGRES_PASSWORD=mypassword
      expose:
        - "8000"
      depends_on:
        - db
  accounts:
    build: ./accounts-service/
    command: >
      sh -c "python manage.py makemigrations &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_DB=mydatabase
      - POSTGRES_USER=myuser
      - POSTGRES_PASSWORD=mypassword
    expose:
      - "8000"
    depends_on:
      - db

  db:
    image: postgres:15
    environment:
      POSTGRES_DB: mydatabase
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
    ports:
      - "5433:5432"
    volumes:
      - pgdata-3:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser -d mydatabase"]
      interval: 5s
      timeout: 5s
      retries: 5

  web:
    build: .
    # La commande vérifie si RUN_TESTS est à "true".
    # Si c'est le cas, elle exécute les migrations puis lance les tests.
    # Sinon, elle exécute les migrations, peuple la BDD puis lance le serveur.
    command: >
      sh -c "python laboratoire_bj/manage.py makemigrations &&
      python laboratoire_bj/manage.py migrate &&
      python laboratoire_bj/manage.py populer &&
      if [ \"$RUN_TESTS\" = \"true\" ]; then
         python laboratoire_bj/manage.py test application_multi_magasins;
      else
         python laboratoire_bj/manage.py runserver 0.0.0.0:8000;
      fi"
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_DB=mydatabase
      - POSTGRES_USER=myuser
      - POSTGRES_PASSWORD=mypassword
    expose:
      - "8000"
    depends_on:
      - db
      
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: "YourAdminPassword"
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
  
  # k6:
  #   image: loadimpact/k6:latest
  #   volumes:
  #     - ./k6:/scripts:ro
  #   environment:
  #     BASE_URL: "http://lb/api"
  #   entrypoint: ["k6", "run", "/scripts/load-test.js"]
  #   depends_on:
  #     - lb

  lb:
    image: nginx:alpine
    ports:
      - "8000:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - web
  
  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"
    expose:
      - "6379"

volumes:
  pgdata-3:
  grafana-data:
